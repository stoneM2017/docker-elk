input {
	beats {
		port => 5044
	}
}

## Add your filters / logstash plugins configuration here
filter {
    if "Middleware" in [message]{
        grok {
          patterns_dir => ["./patterns"]
          match => {"message" => "%{LOG_PREFIX}%{DATA:tag},(?<endpoint>(?<=Middleware,).*?(?=,)),(?<rest_type>(?<=,).*?(?=,)),(?<rest_uuid>%{UUID}),bound\s(?<rest_api>\w+),(?<rest_content>.*)"}
        }
        mutate {
          add_field => {"[restapi][path]" => "%{rest_api}/%{endpoint}"}
        }
        mutate {
          rename => {
            "rest_type"   => "[restapi][type]"
            "endpoint"    => "[restapi][endpoint]"
            "rest_api"    => "[restapi][api]"
            "rest_uuid"   => "[restapi][uuid]"
          }
        }
        if "stat" in [restapi][type] {
          mutate {
            split => {"rest_content" => ","}
            add_field => {
              "[restapi][result]" => "%{[rest_content][0]}"
            }
          }
          ruby {
            code => "
              event.set('[restapi][rtt]', event.get('[rest_content][1]').to_f)
              event.set('[restapi][retryCnt]', event.get('[rest_content][2]').to_i)
            "
          }
        }
        mutate { 
            remove_field => ["rest_content"] 
        }
    } else if "MQ" in [message] {
        # RabbitMQ
        grok {
            patterns_dir => ["./patterns"]
            match => { "message" => "%{LOG_PREFIX}%{DATA:tag}\s(?<mq_type>(?<=MQ\s)\w+)\s(?<mq_key>(?<=\s).*?(?=\s))\s(?:%{NUMBER:[mq][delayTimes]}\s)?(?<mq_content>.*)"}
        }
        ruby {
            code => "event.set('[mq][delayTimes]', event.get('[mq][delayTimes]').to_i)"
        }
        mutate {
          rename => {
            "mq_type" => "[mq][type]"
            "mq_key" => "[mq][key]"
          }
        }
        json {
            source => "mq_content"
            target => "[mq][content]"
        }
        
        if "Recv" == [mq][type] {
            if "Recg" == [mq][key]{
                mutate {
                    add_field => {
                        "[mq][brand]" => "%{[mq][content][brandId]}"
                    }
                    add_field => {
                        "[mq][branchId]" => "%{[mq][content][branchId]}"
                    }
                }
            } else {
                mutate {
                    add_field => {
                        "[mq][brand]" => "%{[mq][content][brand]}"
                    }
                    add_field => {
                        "[mq][siteId]" => "%{[mq][content][siteId]}"
                    }
                }
            }
        } else if "Publish" == [mq][type] {
            if "FR" == [mq][key]{
                mutate {
                    add_field => {
                        "[mq][brand]" => "%{[mq][content][brand]}"
                    }
                }
            }
        } else if "Check" == [mq][type] {
            ruby {
                code => "
                    event.set('[mq][consumerCnt]', event.get('[mq][content][consumerCount]').to_i)
                    event.set('[mq][lagMsgCnt]', event.get('[mq][content][messageCount]').to_i)
                "
            }
        }
        mutate {
            rename => { "mq_content" => "[mq][content]"} 
        }    
    } else if "Statistic" in [message]{
        grok {
          patterns_dir => ["./patterns"]  
          match => { "message" => "%{LOG_PREFIX}%{DATA:tag}\s(?<statistic_content>(?<=Statistic\s).*)"}
        }

        json {
          source => "statistic_content"
          target => "statistic"
        }
        mutate {
          remove_field => ["statistic_content"]
        }
    } else {
        grok {
          patterns_dir => ["./patterns"]
          match => { "message" => "%{LOG_PREFIX}(?<msg>.*$)"}
        }
    }
    
    date {
        match => [logdate, "yyyy-MM-dd HH:mm:ss,SSS"]
        target => "@timestamp"
    }

	mutate {
	    remove_field => "@version"
	    remove_field => "logdate"
        remove_field => "tags"
        remove_field => "message"
	}
}

output {
    stdout {
        codec => rubydebug
    }
	elasticsearch {
		hosts => "elasticsearch:9200"
		index => "%{[fields][app]}-%{+YYYY.MM}"
		user => "elastic"
		password => "NpoXX2ZyvHSTJIaf6jR2"
	}
}
